# docker-compose.yml
version: '3.8'

services:
  ###################################
  # Base de Datos PostgreSQL        #
  ###################################
  db:
    image: postgres:15
    container_name: uaesp_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env # Carga POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB
    ports: # Solo si necesitas acceso directo desde tu máquina host
      - "5432:5432"
    restart: unless-stopped
    networks:
      - uaesp_network

  ###################################
  # Almacenamiento S3 (MinIO)       #
  ###################################
  minio:
    image: minio/minio:latest
    container_name: uaesp_minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API S3
      - "9001:9001" # Consola Web
    volumes:
      - minio_data:/data
    env_file:
      - .env # Carga MINIO_ROOT_USER, MINIO_ROOT_PASSWORD
    restart: unless-stopped
    networks:
      - uaesp_network

  ###################################
  # Motor de Flujo de Datos (NiFi)  #
  ###################################
  nifi:
    image: apache/nifi:latest
    container_name: uaesp_nifi
    ports:
      - "8443:8443" # UI (HTTPS)
    volumes:
      - nifi_conf:/opt/nifi/nifi-current/conf
      - nifi_database_repository:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - nifi_content_repository:/opt/nifi/nifi-current/content_repository
      - nifi_provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - nifi_state:/opt/nifi/nifi-current/state
      - nifi_logs:/opt/nifi/nifi-current/logs
      - ./nifi_drivers:/opt/nifi/drivers
    environment:
      - NIFI_WEB_HTTPS_PORT=8443
      - NIFI_CLUSTER_IS_NODE=false
      - NIFI_CLUSTER_NODE_PROTOCOL_PORT=""
      - NIFI_REMOTE_INPUT_SOCKET_PORT=""
      - NIFI_JVM_HEAP_INIT=1g # Ajusta RAM
      - NIFI_JVM_HEAP_MAX=2g # Ajusta RAM
    #   - NIFI_SENSITIVE_PROPS_KEY=pon_una_llave_segura_aqui # Importante para después
    depends_on:
      - db
      - minio
    restart: unless-stopped
    networks:
      - uaesp_network

  ###################################
  # Aplicación Web Django           #
  ###################################
  web:
    container_name: uaesp_django_web
    build: . # Construye usando el Dockerfile en este directorio
    command: python manage.py runserver 0.0.0.0:8000 # Comando para desarrollo
    volumes:
      - .:/app # Monta el código local en /app dentro del contenedor
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor al 8000 del host
    env_file:
      - .env # Carga SECRET_KEY, DEBUG, DATABASE_URL, etc.
    depends_on:
      - db
      - minio # Si Django necesita acceder a MinIO
      # - nifi # Si Django necesita interactuar con la API de NiFi
    restart: unless-stopped
    networks:
      - uaesp_network

###################################
# Volúmenes Persistentes         #
###################################
volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  nifi_conf:
    driver: local
  nifi_database_repository:
    driver: local
  nifi_flowfile_repository:
    driver: local
  nifi_content_repository:
    driver: local
  nifi_provenance_repository:
    driver: local
  nifi_state:
    driver: local
  nifi_logs:
    driver: local

###################################
# Redes                          #
###################################
networks:
  uaesp_network:
    driver: bridge